#!/bin/bash

BIN_PATH="$(dirname ${0})"
PLATFORM="$(uname)"

if [ -f "${BIN_PATH}/../config" ] ; then
    source "${BIN_PATH}/../config"
else
    source "${BIN_PATH}/../config.dist"
fi

function compute_md5 {
    FILE_PATH="${1}"

    if [ "Darwin" == "${PLATFORM}" ] ; then
        echo "$(md5 -q "${FILE_PATH}")"

        exit 0
    fi

    echo "$(md5sum "${FILE_PATH}" | cut -d ' ' -f 1)"
}

function download_shape {
    TYPE=$(echo $1 | tr '[:lower:]' '[:upper:]')

    SHAPE_URI=$(eval echo \${${TYPE}_SHAPE_URI})
    SHAPE_MD5SUM=$(eval echo \${${TYPE}_SHAPE_MD5SUM})

    if [ ! -f "${CACHE_DIR}/${1}.zip" ] || [ "${SHAPE_MD5SUM}" != "$(compute_md5 "${CACHE_DIR}/${1}.zip")" ] ; then
        echo "====> Download shape file"

        curl -so "${CACHE_DIR}/${1}.zip" "${SHAPE_URI}"

        if [ "${SHAPE_MD5SUM}" != "$(compute_md5 "${CACHE_DIR}/${1}.zip")" ] ; then
            echo "====> Bad checksum of file ${CACHE_DIR}/${1}.zip"

            exit 1
        fi
    else
        echo "====> Shape already downloaded"
    fi
}

function extract_dbf {
    TYPE=$(echo $1 | tr '[:lower:]' '[:upper:]')

    DBF_FILE=$(eval echo \${${TYPE}_DBF_FILE})
    DBF_MD5SUM=$(eval echo \${${TYPE}_DBF_MD5SUM})

    if [ ! -f "${CACHE_DIR}/${DBF_FILE}" ] || [ "${DBF_MD5SUM}" != "$(compute_md5 "${CACHE_DIR}/${DBF_FILE}")" ] ; then
        echo "====> Extract DBF file"

        unzip -oq "${CACHE_DIR}/${1}.zip" "${DBF_FILE}" -d "${CACHE_DIR}"

        if [ "${DBF_MD5SUM}" != "$(compute_md5 "${CACHE_DIR}/${DBF_FILE}")" ] ; then
            echo "===> Bad checksum of file ${DBF_FILE}"

            exit 1
        fi
    else
        echo "====> ${DBF_FILE} already extracted"
    fi
}

function compute_data {
    TYPE=$(echo $1 | tr '[:lower:]' '[:upper:]')

    DBF_FILE=$(eval echo \${${TYPE}_DBF_FILE})

    echo "====> Compute data"
    "${BIN_PATH}/dbf_reader" "${CACHE_DIR}/${DBF_FILE}" "${1}" "${DATA_DIR}"
}


if [ ! -d "${CACHE_DIR}" ] ; then
    mkdir -p "${CACHE_DIR}"
fi

if [ ! -d "${DATA_DIR}" ] ; then
    mkdir -p "${DATA_DIR}"
fi

for type in "${TYPES[@]}" ; do
    echo "==> ${type}"

    download_shape "${type}"
    extract_dbf "${type}"
    compute_data "${type}"
done
